package com.eritlab.jexmon.presentation.screens.conversation_screen.component

import android.content.Context
import android.util.Log
import com.eritlab.jexmon.domain.model.ProductModel
import com.google.firebase.Firebase
import com.google.firebase.firestore.DocumentSnapshot
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.Query
import com.google.firebase.vertexai.vertexAI
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.tasks.await
import kotlinx.coroutines.withContext

data class PriceRange(
    val min: Long,
    val max: Long
)

class VertexAIService(private val context: Context) {
    private val generativeModel by lazy {
        Firebase.vertexAI.generativeModel("gemini-2.0-flash")
    }
    
    private val firestore = FirebaseFirestore.getInstance()

    private var conversationContext = ConversationContext()

    private data class ConversationContext(
        var lastQuery: String = "",
        var lastResponse: String = "",
        var currentTopic: String = "",
        var mentionedProducts: MutableSet<String> = mutableSetOf(),
        var pricePreference: PriceRange? = null,
        var stylePreference: String = "",
        var sizePreference: String = "",
        var colorPreference: String = "",
        var brandPreference: String = ""
    )

    private fun updateContext(query: String, response: String) {
        conversationContext.lastQuery = query
        conversationContext.lastResponse = response
        
        // C·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ hi·ªán t·∫°i
        when {
            query.contains("gi√°") || query.contains("ti·ªÅn") -> 
                conversationContext.currentTopic = "price"
            query.contains("size") || query.contains("s·ªë") -> 
                conversationContext.currentTopic = "size"
            query.contains("m√†u") || query.contains("color") -> 
                conversationContext.currentTopic = "color"
            query.contains("th∆∞∆°ng hi·ªáu") || query.contains("h√£ng") -> 
                conversationContext.currentTopic = "brand"
            query.contains("phong c√°ch") || query.contains("style") -> 
                conversationContext.currentTopic = "style"
        }

        // C·∫≠p nh·∫≠t preferences
        extractPriceRange(query)?.let {
            conversationContext.pricePreference = it
        }
        
        // C·∫≠p nh·∫≠t size preference
        Regex("size\\s*(\\d+)", RegexOption.IGNORE_CASE).find(query)?.let {
            conversationContext.sizePreference = it.groupValues[1]
        }
        
        // C·∫≠p nh·∫≠t color preference
        listOf("ƒëen", "tr·∫Øng", "ƒë·ªè", "xanh", "v√†ng", "black", "white", "red", "blue", "yellow")
            .find { query.lowercase().contains(it) }?.let {
                conversationContext.colorPreference = it
            }
            
        // C·∫≠p nh·∫≠t brand preference
        listOf("nike", "adidas", "puma", "bitis", "converse")
            .find { query.lowercase().contains(it) }?.let {
                conversationContext.brandPreference = it
            }
    }

    private fun buildProductCard(product: ProductModel): String {
        val features = extractKeyFeatures(product.description)
        // Nh√≥m c√°c ƒë·∫∑c ƒëi·ªÉm theo lo·∫°i
        val groupedFeatures = features.groupBy { feature ->
            when {
                feature.contains("[Ch·∫•t li·ªáu]") -> "Ch·∫•t li·ªáu"
                feature.contains("[C√¥ng ngh·ªá]") -> "C√¥ng ngh·ªá"
                feature.contains("[Thi·∫øt k·∫ø]") -> "Thi·∫øt k·∫ø"
                feature.contains("[ƒê·ªëi t∆∞·ª£ng]") -> "ƒê·ªëi t∆∞·ª£ng s·ª≠ d·ª•ng"
                feature.contains("[M·ª•c ƒë√≠ch s·ª≠ d·ª•ng]") -> "M·ª•c ƒë√≠ch s·ª≠ d·ª•ng"
                else -> "Kh√°c"
            }
        }
        
        val formattedFeatures = groupedFeatures.map { (category, featureList) ->
            """
            |üîπ $category:
            |${featureList.joinToString("\n|") { "   ‚Ä¢ ${it.substringAfter("]").trim()}" }}
            """.trimMargin()
        }.joinToString("\n|")

        return """[PRODUCT_START]
        |T√™n: ${product.name}
        |H√¨nh ·∫£nh: ${product.images.firstOrNull()}
        |Gi√°: ${formatPrice(product.price.toLong())}
        |${if (product.discount > 0) "Gi·∫£m gi√°: ${product.discount}%" else ""}
        |Size: ${product.stock.filter { it.quantity > 0 }.map { it.size }.distinct().sorted().joinToString(", ")}
        |M√†u: ${product.stock.filter { it.quantity > 0 }.map { it.color }.distinct().joinToString(", ")}
        |ƒê√°nh gi√°: ${product.rating}/5
        |ƒê√£ b√°n: ${product.sold}
        |
        |üìã ƒê·∫∂C ƒêI·ªÇM N·ªîI B·∫¨T:
        |$formattedFeatures
        |
        |Link: /product/${product.id}
        |[PRODUCT_END]""".trimMargin()
    }

    private fun buildContextualResponse(query: String, products: List<ProductModel>): String {
        val response = StringBuilder()
        
        // Th√™m c√¢u m·ªü ƒë·∫ßu d·ª±a v√†o context
        when {
            conversationContext.currentTopic == "price" && conversationContext.pricePreference != null -> {
                response.append("D·∫°, v·ªõi kho·∫£ng gi√° t·ª´ ${formatPrice(conversationContext.pricePreference!!.min)} ƒë·∫øn ${formatPrice(conversationContext.pricePreference!!.max)}, ")
            }
            conversationContext.brandPreference.isNotEmpty() -> {
                response.append("D·∫°, v·ªÅ c√°c s·∫£n ph·∫©m ${conversationContext.brandPreference.capitalize()}, ")
            }
            else -> {
                response.append("D·∫°, ")
            }
        }

        // Th√™m c√¢u chuy·ªÉn ti·∫øp d·ª±a v√†o context tr∆∞·ªõc ƒë√≥
        when (conversationContext.currentTopic) {
            "price" -> response.append("em xin gi·ªõi thi·ªáu m·ªôt s·ªë m·∫´u ph√π h·ª£p v·ªõi ng√¢n s√°ch:\n\n")
            "size" -> response.append("em xin gi·ªõi thi·ªáu c√°c m·∫´u c√≥ size ${conversationContext.sizePreference}:\n\n")
            "color" -> response.append("em xin gi·ªõi thi·ªáu c√°c m·∫´u m√†u ${conversationContext.colorPreference}:\n\n")
            "brand" -> response.append("em xin gi·ªõi thi·ªáu c√°c m·∫´u ƒëang c√≥ s·∫µn:\n\n")
            "style" -> response.append("em xin gi·ªõi thi·ªáu c√°c m·∫´u phong c√°ch ${conversationContext.stylePreference}:\n\n")
            else -> response.append("em xin gi·ªõi thi·ªáu m·ªôt s·ªë m·∫´u ph√π h·ª£p:\n\n")
        }

        // Th√™m th√¥ng tin s·∫£n ph·∫©m
        val productCards = products.take(3).joinToString("\n\n") { product ->
            buildProductCard(product)
        }
        response.append(productCards)

        // Th√™m ph√¢n t√≠ch chi ti·∫øt
        val analysis = generateProductComparison(products)
        response.append("\n\n").append(analysis)

        // Th√™m c√¢u k·∫øt n·ªëi cho l·∫ßn t∆∞∆°ng t√°c ti·∫øp theo
        response.append("\n\nB·∫°n c√≥ mu·ªën em t∆∞ v·∫•n th√™m v·ªÅ:")
        when (conversationContext.currentTopic) {
            "price" -> response.append("\n‚Ä¢ C√°c m·∫´u ·ªü ph√¢n kh√∫c gi√° kh√°c")
            "size" -> response.append("\n‚Ä¢ C√°c size kh√°c ƒëang c√≥ s·∫µn")
            "color" -> response.append("\n‚Ä¢ C√°c m√†u s·∫Øc kh√°c c·ªßa m·∫´u n√†y")
            "brand" -> response.append("\n‚Ä¢ C√°c th∆∞∆°ng hi·ªáu t∆∞∆°ng t·ª±")
            "style" -> response.append("\n‚Ä¢ C√°c phong c√°ch kh√°c")
        }
        response.append("\n‚Ä¢ Th√¥ng tin chi ti·∫øt v·ªÅ b·∫•t k·ª≥ s·∫£n ph·∫©m n√†o b·∫°n quan t√¢m")
        response.append("\n‚Ä¢ C√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i ƒëang √°p d·ª•ng")

        return response.toString()
    }

    private fun extractPriceRange(text: String): PriceRange? {
        val normalizedText = text.lowercase().replace("ƒë", "")
            .replace("vnd", "")
            .replace(".", "")
            .replace(",", "")
        
        // Convert "tri·ªáu" to actual number
        val processedText = normalizedText.replace(Regex("(\\d+)\\s*tri·ªáu")) { matchResult ->
            val number = matchResult.groupValues[1].toLong() * 1000000
            number.toString()
        }
        
        // Convert "k" to actual number
        val finalText = processedText.replace(Regex("(\\d+)\\s*k")) { matchResult ->
            val number = matchResult.groupValues[1].toLong() * 1000
            number.toString()
        }

        return when {
            // Pattern: "t·ª´ X ƒë·∫øn Y"
            finalText.matches(Regex(".*(t·ª´|from)\\s*(\\d+)\\s*(ƒë·∫øn|to)\\s*(\\d+).*")) -> {
                val numbers = Regex("\\d+").findAll(finalText)
                    .map { it.value.toLong() }
                    .toList()
                PriceRange(numbers[0], numbers[1])
            }
            
            // Pattern: "d∆∞·ªõi X" or "less than X"
            finalText.matches(Regex(".*(d∆∞·ªõi|under|less than)\\s*(\\d+).*")) -> {
                val max = Regex("\\d+").find(finalText)?.value?.toLong() ?: return null
                PriceRange(0, max)
            }
            
            // Pattern: "tr√™n X" or "more than X"
            finalText.matches(Regex(".*(tr√™n|over|more than)\\s*(\\d+).*")) -> {
                val min = Regex("\\d+").find(finalText)?.value?.toLong() ?: return null
                PriceRange(min, Long.MAX_VALUE)
            }
            
            // Pattern: "t·∫ßm X" or "kho·∫£ng X" or "around X"
            finalText.matches(Regex(".*(t·∫ßm|kho·∫£ng|about|around)\\s*(\\d+).*")) -> {
                val center = Regex("\\d+").find(finalText)?.value?.toLong() ?: return null
                val margin = center * 0.2 // 20% margin
                PriceRange((center - margin).toLong(), (center + margin).toLong())
            }
            
            else -> null
        }
    }

    private fun buildSystemPrompt(userQuery: String, priceRange: PriceRange? = null): String {
        return """
            |B·∫°n l√† tr·ª£ l√Ω AI c·ªßa c·ª≠a h√†ng gi√†y. Nhi·ªám v·ª• c·ªßa b·∫°n l√† gi√∫p kh√°ch h√†ng t√¨m ki·∫øm v√† g·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p.
            |
            |NGUY√äN T·∫ÆC TR·∫¢ L·ªúI:
            |1. LU√îN duy tr√¨ ch·ªß ƒë·ªÅ v√† ng·ªØ c·∫£nh c·ªßa cu·ªôc tr√≤ chuy·ªán
            |2. KH√îNG h·ªèi l·∫°i th√¥ng tin m√† kh√°ch h√†ng ƒë√£ cung c·∫•p
            |3. KH√îNG thay ƒë·ªïi ch·ªß ƒë·ªÅ ƒë·ªôt ng·ªôt
            |4. Khi kh√°ch h·ªèi v·ªÅ s·∫£n ph·∫©m c·ª• th·ªÉ, t·∫≠p trung v√†o s·∫£n ph·∫©m ƒë√≥
            |5. Ch·ªâ h·ªèi th√™m th√¥ng tin khi th·ª±c s·ª± c·∫ßn thi·∫øt v√† li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ hi·ªán t·∫°i
            |
            |TH√îNG TIN C·ª¨A H√ÄNG:
            |* Chuy√™n cung c·∫•p c√°c lo·∫°i gi√†y: th·ªÉ thao, ch·∫°y b·ªô, ƒëi ch∆°i, c√¥ng s·ªü
            |* C√≥ s·∫µn cho c·∫£ nam v√† n·ªØ
            |* C√°c th∆∞∆°ng hi·ªáu: Nike, Adidas, Puma, Bitis, Converse
            |* Kho·∫£ng gi√°: t·ª´ 200.000ƒë ƒë·∫øn 20.000.000ƒë
            |
            |C√ÅCH HI·ªÇN TH·ªä S·∫¢N PH·∫®M:
            |1. Lu√¥n hi·ªÉn th·ªã h√¨nh ·∫£nh s·∫£n ph·∫©m n·∫øu c√≥
            |2. Th√¥ng tin hi·ªÉn th·ªã theo th·ª© t·ª±:
            |   - T√™n v√† h√¨nh ·∫£nh s·∫£n ph·∫©m
            |   - Gi√° v√† khuy·∫øn m√£i (n·∫øu c√≥)
            |   - Size v√† m√†u s·∫Øc c√≤n h√†ng
            |   - ƒê√°nh gi√° v√† s·ªë l∆∞·ª£ng ƒë√£ b√°n
            |   - ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t
            |3. Ch·ªâ hi·ªÉn th·ªã size v√† m√†u c√≤n h√†ng
            |
            |QUERY HI·ªÜN T·∫†I: $userQuery
            |${priceRange?.let { "KHO·∫¢NG GI√Å ƒê√É X√ÅC ƒê·ªäNH: ${formatPrice(it.min)} - ${formatPrice(it.max)}" } ?: ""}
            |
            |H√£y tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán v√† lu√¥n gi·ªØ t√≠nh li·ªÅn m·∫°ch c·ªßa cu·ªôc tr√≤ chuy·ªán.
        """.trimMargin()
    }

    private suspend fun buildProductContext(): String = withContext(Dispatchers.IO) {
        try {
            val categoriesRef = firestore.collection("categories").get().await()
            val brandsRef = firestore.collection("brands").get().await()
            val productsRef = firestore.collection("products").get().await()

            val categories = categoriesRef.documents.mapNotNull { it.getString("name") }
            val brands = brandsRef.documents.mapNotNull { it.getString("name") }
            val priceStats = calculatePriceStatistics(productsRef.documents)

            """
            |TH√îNG TIN S·∫¢N PH·∫®M TRONG KHO:
            |* T·ªïng s·ªë s·∫£n ph·∫©m: ${productsRef.size()}
            |* Danh m·ª•c: ${categories.joinToString(", ")}
            |* Th∆∞∆°ng hi·ªáu: ${brands.joinToString(", ")}
            |* Gi√° th·∫•p nh·∫•t: ${formatPrice(priceStats.minPrice)}
            |* Gi√° cao nh·∫•t: ${formatPrice(priceStats.maxPrice)}
            |* Gi√° trung b√¨nh: ${formatPrice(priceStats.avgPrice)}
            |* C√°c m·ª©c gi√° ph·ªï bi·∫øn: ${priceStats.popularPriceRanges.joinToString(", ") { "${formatPrice(it.first)} - ${formatPrice(it.second)}" }}
            """.trimMargin()
        } catch (e: Exception) {
            Log.e(TAG, "Error building product context", e)
            ""
        }
    }

    private data class PriceStatistics(
        val minPrice: Long,
        val maxPrice: Long,
        val avgPrice: Long,
        val popularPriceRanges: List<Pair<Long, Long>>
    )

    private fun calculatePriceStatistics(products: List<DocumentSnapshot>): PriceStatistics {
        val prices = products.mapNotNull { doc ->
            doc.getLong("price")
        }

        if (prices.isEmpty()) {
            return PriceStatistics(0, 0, 0, emptyList())
        }

        val minPrice = prices.minOrNull() ?: 0
        val maxPrice = prices.maxOrNull() ?: 0
        val avgPrice = prices.average().toLong()

        // T·∫°o c√°c kho·∫£ng gi√° ph·ªï bi·∫øn
        val priceRanges = mutableListOf<Pair<Long, Long>>()
        val range = maxPrice - minPrice
        val step = range / 4 // Chia th√†nh 4 kho·∫£ng gi√°

        for (i in 0..3) {
            val start = minPrice + (step * i)
            val end = if (i == 3) maxPrice else minPrice + (step * (i + 1))
            val count = prices.count { it in start..end }
            if (count > prices.size / 10) { // Ch·ªâ l·∫•y kho·∫£ng gi√° c√≥ √≠t nh·∫•t 10% s·∫£n ph·∫©m
                priceRanges.add(Pair(start, end))
            }
        }

        return PriceStatistics(minPrice, maxPrice, avgPrice, priceRanges)
    }

    private suspend fun findSimilarProducts(product: ProductModel): List<ProductModel> = withContext(Dispatchers.IO) {
        try {
            val productsRef = firestore.collection("products")
            val query = productsRef
                .whereEqualTo("categoryId", product.categoryId)
                .whereLessThanOrEqualTo("price", product.price * 1.2) // Gi√° cao h∆°n 20%
                .whereGreaterThanOrEqualTo("price", product.price * 0.8) // Gi√° th·∫•p h∆°n 20%
                .limit(5)

            val snapshot = query.get().await()
            return@withContext snapshot.documents
                .mapNotNull { doc -> doc.toObject(ProductModel::class.java)?.copy(id = doc.id) }
                .filter { it.id != product.id }
        } catch (e: Exception) {
            Log.e(TAG, "Error finding similar products", e)
            emptyList()
        }
    }

    private suspend fun enhanceProductContext(product: ProductModel): String = withContext(Dispatchers.IO) {
        try {
            // L·∫•y th√¥ng tin category
            val category = firestore.collection("categories")
                .document(product.categoryId)
                .get()
                .await()
            
            // L·∫•y th√¥ng tin brand
            val brand = firestore.collection("brands")
                .document(product.brandId)
                .get()
                .await()
            // L·∫•y th√¥ng tin stock (size v√† m√†u s·∫Øc) c·ªßa s·∫£n ph·∫©m
            val stock = firestore.collection("products")
                .document(product.id)
                .collection("stock")
                .get()
                .await()

            // Ph√¢n t√≠ch description
            val features = extractKeyFeatures(product.description)
            
            // Ph√¢n t√≠ch size v√† m√†u s·∫Øc c√≥ s·∫µn
            val stockItems = stock.documents.mapNotNull { doc ->
                Triple(
                    doc.getLong("size")?.toInt() ?: 0,
                    doc.getString("color") ?: "",
                    doc.getLong("quantity")?.toInt() ?: 0
                )
            }
            
            val availableSizes = stockItems
                .filter { it.third > 0 } // Ch·ªâ l·∫•y nh·ªØng size c√≤n h√†ng
                .map { it.first }
                .distinct()
                .sorted()
            
            val availableColors = stockItems
                .filter { it.third > 0 } // Ch·ªâ l·∫•y nh·ªØng m√†u c√≤n h√†ng
                .map { it.second }
                .distinct()

            // T√≠nh to√°n t·ªïng s·ªë l∆∞·ª£ng h√†ng t·ªìn kho
            val totalStock = stockItems.sumOf { it.third }
            
            // T√≠nh to√°n ƒë·ªô ph·ªï bi·∫øn
            val popularity = calculatePopularity(product.rating, product.sold)
            Log.d(TAG, "Product popularity: {${product.images}}  " )
            
            """
            |[PRODUCT_CONTEXT]
            |T√™n: ${product.name}
            |Danh m·ª•c: ${category.getString("name") ?: product.categoryId}
            |Th∆∞∆°ng hi·ªáu: ${brand.getString("name") ?: product.brandId}
            |Gi√°: ${formatPrice(product.price.toLong())}
            |${if (product.discount > 0) "Gi·∫£m gi√°: ${product.discount}%" else ""}
            |ƒê√°nh gi√°: ${product.rating}/5 (${product.sold} ƒë√£ b√°n)
            |
            |Anh m√¥ t·∫£: ${product.images.firstOrNull()}
            |
            |ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t:
            |${features.joinToString("\n") { "- $it" }}
            |
            |Size c√≥ s·∫µn: ${availableSizes.joinToString(", ")}
            |M√†u s·∫Øc: ${availableColors.joinToString(", ")}
            |
            |ƒê·ªô ph·ªï bi·∫øn: $popularity
            |[/PRODUCT_CONTEXT]
            """.trimMargin()
        } catch (e: Exception) {
            Log.e(TAG, "Error enhancing product context", e)
            return@withContext """
                |[PRODUCT_CONTEXT]
                |T√™n: ${product.name}
                |Danh m·ª•c: ${product.categoryId}
                |Th∆∞∆°ng hi·ªáu: ${product.brandId}
                |Gi√°: ${formatPrice(product.price.toLong())}
                |ƒê√°nh gi√°: ${product.rating}/5 (${product.sold} ƒë√£ b√°n)
                |
                |ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t:
                |Kh√¥ng c√≥ th√¥ng tin
                |
                |Size c√≥ s·∫µn: Kh√¥ng c√≥ th√¥ng tin
                |M√†u s·∫Øc: Kh√¥ng c√≥ th√¥ng tin
                |
                |ƒê·ªô ph·ªï bi·∫øn: Kh√¥ng c√≥ th√¥ng tin
                |[/PRODUCT_CONTEXT]
            """.trimMargin()

        }
    }

    private fun extractKeyFeatures(description: String): List<String> {
        val features = mutableListOf<String>()
        val normalizedDesc = description.lowercase()
        
        // Patterns cho t·ª´ng lo·∫°i th√¥ng tin
        val patterns = mapOf(
            "Ch·∫•t li·ªáu" to listOf(
                "(ƒë∆∞·ª£c l√†m t·ª´|ch·∫•t li·ªáu|s·ª≠ d·ª•ng) (.*?)(\\.|$)",
                "(da|v·∫£i|cao su|canvas|mesh|knit|leather|fabric) (.*?)(\\.|$)",
                "ch·∫•t li·ªáu (.*?) (cao c·∫•p|tho√°ng kh√≠|b·ªÅn b·ªâ|m·ªÅm m·∫°i)"
            ),
            "Thi·∫øt k·∫ø" to listOf(
                "(thi·∫øt k·∫ø|ki·ªÉu d√°ng) (.*?)(\\.|$)",
                "phong c√°ch (.*?) (hi·ªán ƒë·∫°i|tr·∫ª trung|nƒÉng ƒë·ªông|thanh l·ªãch)",
                "(ƒë∆∞·ªùng may|h·ªça ti·∫øt|logo|ƒëi·ªÉm nh·∫•n) (.*?)(\\.|$)"
            ),
            "ƒê·ªëi t∆∞·ª£ng" to listOf(
                "(ph√π h·ª£p|th√≠ch h·ª£p|d√†nh cho) (.*?)(\\.|$)",
                "(nam|n·ªØ|unisex|ng∆∞·ªùi l·ªõn|tr·∫ª em) (.*?)(\\.|$)",
                "phong c√°ch (.*?) (nƒÉng ƒë·ªông|c√¥ng s·ªü|th·ªÉ thao)"
            ),
            "C√¥ng ngh·ªá" to listOf(
                "(c√¥ng ngh·ªá|technology|tech) (.*?)(\\.|$)",
                "(ƒë·∫ø gi√†y|l√≥t gi√†y|upper) (.*?)(\\.|$)",
                "(ch·ªëng tr∆∞·ª£t|kh√°ng khu·∫©n|tho√°ng kh√≠) (.*?)(\\.|$)"
            ),
            "M·ª•c ƒë√≠ch s·ª≠ d·ª•ng" to listOf(
                "(s·ª≠ d·ª•ng|d√πng|mang) (cho|ƒë·ªÉ|khi) (.*?)(\\.|$)",
                "(ƒëi l√†m|ƒëi h·ªçc|t·∫≠p gym|ch·∫°y b·ªô|ƒëi ch∆°i) (.*?)(\\.|$)",
                "(trong|ngo√†i) (.*?) (tr·ªùi|nh√†|m√¥i tr∆∞·ªùng)"
            )
        )

        // Ph√¢n t√≠ch theo t·ª´ng pattern
        patterns.forEach { (category, patternList) ->
            patternList.forEach { pattern ->
                val regex = Regex(pattern)
                val matches = regex.findAll(normalizedDesc)
                matches.forEach { match ->
                    val feature = match.groupValues[0].trim()
                    if (feature.length >= 10) { // Ch·ªâ l·∫•y c√°c ƒë·∫∑c ƒëi·ªÉm c√≥ √Ω nghƒ©a
                        features.add("[$category] $feature")
                    }
                }
            }
        }

        return features.distinct().take(7) // L·∫•y 7 ƒë·∫∑c ƒëi·ªÉm quan tr·ªçng nh·∫•t
    }

    private fun calculatePopularity(rating: Double, sold: Int): String {
        // T√≠nh ƒëi·ªÉm ph·ªï bi·∫øn (0-100)
        val popularityScore = ((rating * 10) + when (sold) {
            in 0..10 -> 10.0
            in 11..50 -> 20.0
            in 51..200 -> 40.0
            in 201..500 -> 60.0
            in 501..1000 -> 80.0
            else -> 100.0
        }).toInt()

        return when (popularityScore) {
            in 0..30 -> "M·ªõi ra m·∫Øt"
            in 31..50 -> "B√¨nh th∆∞·ªùng"
            in 51..70 -> "Kh√° ph·ªï bi·∫øn"
            in 71..90 -> "Ph·ªï bi·∫øn"
            else -> "R·∫•t ph·ªï bi·∫øn"
        }
    }

    suspend fun generateResponse(prompt: String): AIResult<String> = withContext(Dispatchers.IO) {
        try {
            val priceRange = extractPriceRange(prompt)
            val productContext = buildProductContext()
            val systemPrompt = buildSystemPrompt(prompt, priceRange)
            
            // Ki·ªÉm tra n·∫øu prompt li√™n quan ƒë·∫øn s·∫£n ph·∫©m
            if (isProductRelatedQuery(prompt)) {
                val products = searchProducts(prompt, priceRange)
                if (products.isNotEmpty()) {
                    val response = buildContextualResponse(prompt, products)
                    updateContext(prompt, response)
                    return@withContext AIResult.Success(response)
                } else {
                    val response = generateSearchSuggestions(prompt, priceRange)
                    updateContext(prompt, response)
                    return@withContext AIResult.Success(response)
                }
            }
            
            // X·ª≠ l√Ω c√°c c√¢u h·ªèi th√¥ng th∆∞·ªùng
            val response = generativeModel.generateContent(
                """
                |$systemPrompt
                |
                |CONTEXT HI·ªÜN T·∫†I:
                |C√¢u h·ªèi tr∆∞·ªõc: ${conversationContext.lastQuery}
                |Tr·∫£ l·ªùi tr∆∞·ªõc: ${conversationContext.lastResponse}
                |Ch·ªß ƒë·ªÅ: ${conversationContext.currentTopic}
                |
                |H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng m·ªôt c√°ch t·ª± nhi√™n v√† li·ªÅn m·∫°ch, 
                |d·ª±a tr√™n ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán v√† th√¥ng tin ƒë√£ trao ƒë·ªïi tr∆∞·ªõc ƒë√≥.
                """.trimMargin()
            ).text ?: ""
            
            if (response.isNotEmpty()) {
                updateContext(prompt, response)
                AIResult.Success(response)
            } else {
                AIResult.Error(Exception("No response generated"))
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error generating response", e)
            AIResult.Error(e)
        }
    }

    private fun generateProductComparison(products: List<ProductModel>): String {
        if (products.isEmpty()) return ""

        val comparison = StringBuilder("\nüí° PH√ÇN T√çCH CHI TI·∫æT S·∫¢N PH·∫®M:\n\n")

        // Ph√¢n lo·∫°i s·∫£n ph·∫©m theo ph√¢n kh√∫c gi√°
        val priceCategories = products.groupBy { product ->
            when {
                product.price <= 2000000 -> "Ph√¢n kh√∫c ph·ªï th√¥ng"
                product.price <= 4000000 -> "Ph√¢n kh√∫c trung c·∫•p"
                else -> "Ph√¢n kh√∫c cao c·∫•p"
            }
        }

        // Ph√¢n t√≠ch theo ph√¢n kh√∫c gi√°
        comparison.append("üí∞ PH√ÇN T√çCH THEO GI√Å:\n")
        priceCategories.forEach { (category, productList) ->
            comparison.append("‚Ä¢ $category:\n")
            productList.forEach { product ->
                val priceValue = formatPrice(product.price.toLong())
                val discountInfo = if (product.discount > 0) " (Gi·∫£m ${product.discount}%)" else ""
                comparison.append("  - ${product.name}: $priceValue$discountInfo\n")
            }
        }

        // Ph√¢n t√≠ch ƒë√°nh gi√° v√† ƒë·ªô ph·ªï bi·∫øn
        comparison.append("\n‚≠ê ƒê√ÅNH GI√Å V√Ä ƒê·ªò PH·ªî BI·∫æN:\n")
        val bestRated = products.maxByOrNull { it.rating }
        val mostSold = products.maxByOrNull { it.sold }
        
        bestRated?.let {
            comparison.append("‚Ä¢ S·∫£n ph·∫©m ƒë∆∞·ª£c ƒë√°nh gi√° cao nh·∫•t:\n")
            comparison.append("  - ${it.name}: ${it.rating}/5 sao")
            if (it.sold > 0) {
                comparison.append(" | ƒê√£ b√°n: ${it.sold}")
            }
            comparison.append("\n")
        }

        mostSold?.let {
            if (it.sold > 0) {
                comparison.append("‚Ä¢ S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t:\n")
                comparison.append("  - ${it.name}: ƒê√£ b√°n ${it.sold} | ƒê√°nh gi√°: ${it.rating}/5 sao\n")
            }
        }

        // Ph√¢n t√≠ch size v√† m√†u s·∫Øc
        comparison.append("\nüëü SIZE V√Ä M√ÄU S·∫ÆC:\n")
        products.forEach { product ->
            comparison.append("‚Ä¢ ${product.name}:\n")
            comparison.append("  - Size c√≥ s·∫µn: ${product.stock.filter { it.quantity > 0 }.map { it.size }.distinct().sorted().joinToString(", ")}\n")
            comparison.append("  - M√†u s·∫Øc: ${product.stock.filter { it.quantity > 0 }.map { it.color }.distinct().joinToString(", ")}\n")
        }

        // ƒê·ªÅ xu·∫•t theo m·ª•c ƒë√≠ch s·ª≠ d·ª•ng
        comparison.append("\nüéØ G·ª¢I √ù THEO M·ª§C ƒê√çCH S·ª¨ D·ª§NG:\n")
        products.forEach { product ->
            val features = extractKeyFeatures(product.description)
            val usageFeatures = features.filter { it.contains("[M·ª•c ƒë√≠ch s·ª≠ d·ª•ng]") }
            if (usageFeatures.isNotEmpty()) {
                comparison.append("‚Ä¢ ${product.name}:\n")
                usageFeatures.forEach { feature ->
                    comparison.append("  - ${feature.substringAfter("]").trim()}\n")
                }
            }
        }

        // T·ªïng k·∫øt v√† ƒë·ªÅ xu·∫•t
        comparison.append("\nüíé T·ªîNG K·∫æT V√Ä ƒê·ªÄ XU·∫§T:\n")
        comparison.append("‚Ä¢ S·∫£n ph·∫©m t·ªët nh·∫•t v·ªÅ gi√°/ch·∫•t l∆∞·ª£ng: ")
        val bestValueProduct = products.maxByOrNull { (it.rating * 5 + it.sold) / it.price.toDouble() }
        bestValueProduct?.let {
            comparison.append("${it.name} (ƒê√°nh gi√°: ${it.rating}/5, Gi√°: ${formatPrice(it.price.toLong())})\n")
        }

        comparison.append("‚Ä¢ S·∫£n ph·∫©m ƒë√°ng ch√∫ √Ω:\n")
        products.filter { it.discount > 20 || it.rating >= 4.0 || it.sold > 100 }.forEach { product ->
            val highlights = mutableListOf<String>()
            if (product.discount > 20) highlights.add("Gi·∫£m gi√° l·ªõn ${product.discount}%")
            if (product.rating >= 4.0) highlights.add("ƒê√°nh gi√° cao ${product.rating}/5")
            if (product.sold > 100) highlights.add("B√°n ch·∫°y ${product.sold} s·∫£n ph·∫©m")
            
            if (highlights.isNotEmpty()) {
                comparison.append("  - ${product.name}: ${highlights.joinToString(" | ")}\n")
            }
        }

        return comparison.toString()
    }

    private fun isProductSuggestionQuery(prompt: String): Boolean {
        val suggestionKeywords = listOf(
            "g·ª£i √Ω", "suggest", "recommend", "ƒë·ªÅ xu·∫•t",
            "t√¨m gi√∫p", "t√¨m cho", "cho xem", "hi·ªÉn th·ªã",
            "t√¨m s·∫£n ph·∫©m", "t√¨m gi√†y", "xem gi√†y",
            "mu·ªën mua", "c·∫ßn mua", "t∆∞ v·∫•n", "t·∫ßm", "kho·∫£ng"
        )
        return suggestionKeywords.any { keyword ->
            prompt.lowercase().contains(keyword.lowercase())
        }
    }

    private suspend fun searchProducts(query: String, priceRange: PriceRange? = null): List<ProductModel> = withContext(Dispatchers.IO) {
        try {
            val queryWords = normalizeSearchQuery(query)
            val productsRef = firestore.collection("products")
            
            // Nh·∫≠n di·ªán t√¨m ki·∫øm s·∫£n ph·∫©m c·ª• th·ªÉ d·ª±a tr√™n pattern c√¢u h·ªèi
            val isSpecificSearch = query.lowercase().let { q ->
                // Pattern cho c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m c·ª• th·ªÉ
                val patterns = listOf(
                    "th√¥ng tin.*v·ªÅ.*gi√†y.*",           // "th√¥ng tin v·ªÅ gi√†y X"
                    "cho.*bi·∫øt.*v·ªÅ.*gi√†y.*",           // "cho bi·∫øt v·ªÅ gi√†y X"
                    "gi√†y.*c√≥.*g√¨.*ƒë·∫∑c bi·ªát",          // "gi√†y X c√≥ g√¨ ƒë·∫∑c bi·ªát"
                    "chi ti·∫øt.*gi√†y.*",                // "chi ti·∫øt gi√†y X"
                    "m√¥ t·∫£.*gi√†y.*",                   // "m√¥ t·∫£ gi√†y X"
                    "ƒë·∫∑c ƒëi·ªÉm.*gi√†y.*",                // "ƒë·∫∑c ƒëi·ªÉm gi√†y X"
                    "gi·ªõi thi·ªáu.*gi√†y.*"               // "gi·ªõi thi·ªáu gi√†y X"
                )
                
                patterns.any { pattern -> 
                    q.matches(Regex(pattern, RegexOption.IGNORE_CASE))
                }
            }

            // T·∫°o c√°c filter c∆° b·∫£n
            var baseQuery: Query = productsRef
            
            // √Åp d·ª•ng filter gi√° n·∫øu c√≥
            if (priceRange != null) {
                baseQuery = baseQuery
                    .whereGreaterThanOrEqualTo("price", priceRange.min)
                    .whereLessThanOrEqualTo("price", priceRange.max)
            }

            val snapshot = baseQuery.get().await()
            
            // Ph√¢n t√≠ch v√† cho ƒëi·ªÉm t·ª´ng s·∫£n ph·∫©m
            val scoredProducts = snapshot.documents.mapNotNull { doc ->
                val product = doc.toObject(ProductModel::class.java)?.copy(id = doc.id)
                if (product != null) {
                    val score = calculateProductScore(product, queryWords)
                    if (score > 0) ProductWithScore(product, score) else null
                } else null
            }
            .sortedByDescending { it.score }

            return@withContext if (isSpecificSearch && scoredProducts.isNotEmpty()) {
                // N·∫øu l√† t√¨m s·∫£n ph·∫©m c·ª• th·ªÉ v√† c√≥ k·∫øt qu·∫£ ph√π h·ª£p, ch·ªâ tr·∫£ v·ªÅ s·∫£n ph·∫©m ƒëi·ªÉm cao nh·∫•t
                scoredProducts.take(1).map { it.product }
            } else {
                // N·∫øu l√† t√¨m ki·∫øm chung ho·∫∑c kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p, tr·∫£ v·ªÅ nhi·ªÅu s·∫£n ph·∫©m
                scoredProducts.take(7).map { it.product }
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error searching products", e)
            emptyList()
        }
    }

    private data class ProductWithScore(
        val product: ProductModel,
        val score: Double
    )

    private fun normalizeSearchQuery(query: String): List<String> {
        return query.lowercase()
            .replace(Regex("[^\\w\\s]"), " ")
            .split(" ")
            .filter { it.length > 2 } // B·ªè qua c√°c t·ª´ qu√° ng·∫Øn
    }

    private fun calculateProductScore(product: ProductModel, queryWords: List<String>): Double {
        var score = 0.0
        val productText = """
            ${product.name}
            ${product.description}
            ${product.categoryId}
            ${product.brandId}
        """.lowercase()

        // T√≠nh ƒëi·ªÉm cho match ch√≠nh x√°c t√™n s·∫£n ph·∫©m
        val productNameWords = product.name.lowercase().split(" ")
        
        // T√¨m chu·ªói t·ª´ li√™n ti·∫øp d√†i nh·∫•t match v·ªõi t√™n s·∫£n ph·∫©m
        val maxConsecutiveMatches = queryWords.windowed(queryWords.size, partialWindows = true)
            .maxOfOrNull { window ->
                var matchCount = 0
                var maxMatchCount = 0
                productNameWords.forEach { word ->
                    if (window.any { it in word }) {
                        matchCount++
                        maxMatchCount = maxOf(maxMatchCount, matchCount)
                    } else {
                        matchCount = 0
                    }
                }
                maxMatchCount
            } ?: 0

        // Cho ƒëi·ªÉm d·ª±a tr√™n s·ªë t·ª´ match li√™n ti·∫øp
        score += maxConsecutiveMatches * 15.0

        // T√≠nh ƒëi·ªÉm cho c√°c match ri√™ng l·∫ª
        queryWords.forEach { word ->
            when {
                productNameWords.any { it.contains(word) } -> score += 10.0
                product.description.lowercase().contains(word) -> score += 5.0
                product.categoryId.lowercase().contains(word) -> score += 3.0
                product.brandId.lowercase().contains(word) -> score += 3.0
            }
        }

        // ƒêi·ªÉm cho ƒë√°nh gi√° v√† doanh s·ªë
        score += (product.rating * 2)
        score += when (product.sold) {
            in 0..10 -> 1.0
            in 11..50 -> 2.0
            in 51..200 -> 3.0
            in 201..500 -> 4.0
            else -> 5.0
        }

        // ƒêi·ªÉm cho t·ªìn kho
        if (product.stock.any { it.quantity > 0 }) {
            score += 2.0
        }

        return score
    }

    private fun formatPrice(price: Long): String {
        return when {
            price >= 1_000_000 -> "${price / 1_000_000} tri·ªáu"
            price >= 1_000 -> "${price / 1_000}k"
            else -> price.toString()
        }
    }

    private fun generateSearchSuggestions(prompt: String, priceRange: PriceRange?): String {
        val priceRangeText = when {
            priceRange == null -> "s·∫£n ph·∫©m"
            priceRange.max == Long.MAX_VALUE -> "s·∫£n ph·∫©m tr√™n ${formatPrice(priceRange.min)}"
            priceRange.min == 0L -> "s·∫£n ph·∫©m d∆∞·ªõi ${formatPrice(priceRange.max)}"
            else -> "s·∫£n ph·∫©m t·ª´ ${formatPrice(priceRange.min)} ƒë·∫øn ${formatPrice(priceRange.max)}"
        }

        return """
            |ƒê·ªÉ t√¨m $priceRangeText ph√π h·ª£p nh·∫•t v·ªõi b·∫°n, cho t√¥i bi·∫øt th√™m:
            |
            |* B·∫°n th√≠ch phong c√°ch n√†o? (nƒÉng ƒë·ªông, thanh l·ªãch, basic, c√° t√≠nh)
            |* B·∫°n c√≥ ∆∞u ti√™n th∆∞∆°ng hi·ªáu n√†o kh√¥ng? (Nike, Adidas, Puma, v.v.)
            |* B·∫°n th∆∞·ªùng xuy√™n s·ª≠ d·ª•ng gi√†y trong ho√†n c·∫£nh n√†o? (ƒëi h·ªçc, ƒëi l√†m, t·∫≠p th·ªÉ thao)
            |
            |T√¥i s·∫Ω gi√∫p b·∫°n t√¨m ƒë∆∞·ª£c s·∫£n ph·∫©m ∆∞ng √Ω nh·∫•t!
        """.trimMargin()
    }

    private fun isProductRelatedQuery(prompt: String): Boolean {
        val productKeywords = listOf(
            "gi√†y", "s·∫£n ph·∫©m", "s·∫£n ph·∫©m gi√†y", "th·ªÉ thao", "ƒëi ch∆°i", "c√¥ng s·ªü", "ch·∫°y b·ªô", "gi√°", "ti·ªÅn", "size", "m√†u", "th∆∞∆°ng hi·ªáu", "h√£ng", "phong c√°ch", "style"
        )
        return productKeywords.any { keyword ->
            prompt.lowercase().contains(keyword.lowercase())
        }
    }

    companion object {
        private const val TAG = "VertexAIService"
        
        // Training categories for better product matching
        private val CATEGORIES = mapOf(
            "th·ªÉ thao" to listOf("running", "training", "gym", "sports"),
            "ƒëi ch∆°i" to listOf("casual", "lifestyle", "sneakers"),
            "c√¥ng s·ªü" to listOf("formal", "business", "office"),
            "ch·∫°y b·ªô" to listOf("running", "jogging", "athletics")
        )
        
        private val STYLES = mapOf(
            "nƒÉng ƒë·ªông" to listOf("sporty", "athletic", "casual"),
            "thanh l·ªãch" to listOf("formal", "elegant", "classic"),
            "basic" to listOf("simple", "minimal", "casual"),
            "c√° t√≠nh" to listOf("unique", "trendy", "streetwear")
        )
    }
} 