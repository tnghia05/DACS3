package com.eritlab.jexmon.presentation.screens.product_detail_screen.component

import android.app.Activity
import android.util.Log
import android.widget.Toast
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.ColorFilter
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.graphics.toColorInt
import androidx.hilt.navigation.compose.hiltViewModel
import coil.compose.rememberAsyncImagePainter
import com.eritlab.jexmon.R
import com.eritlab.jexmon.presentation.common.CustomDefaultBtn
import com.eritlab.jexmon.presentation.screens.product_detail_screen.ProductDetailViewModel
import com.eritlab.jexmon.presentation.ui.theme.PrimaryColor
import com.eritlab.jexmon.presentation.ui.theme.PrimaryLightColor
import com.eritlab.jexmon.presentation.ui.theme.TextColor
import kotlinx.coroutines.launch
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.ModalBottomSheet
import androidx.compose.runtime.rememberCoroutineScope
import com.eritlab.jexmon.domain.model.ProductModel
import com.eritlab.jexmon.domain.model.ProductStock
import androidx.compose.material3.rememberModalBottomSheetState
import androidx.compose.material3.ModalBottomSheet
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.draw.rotate
import androidx.compose.ui.text.style.TextDecoration
import com.google.firebase.firestore.FirebaseFirestore

@Composable
fun ProductDetailScreen(
    productId: String,
    popBack: () -> Unit,
    viewModel: ProductDetailViewModel = hiltViewModel() // ‚úÖ Truy·ªÅn ViewModel m·∫∑c ƒë·ªãnh
) {
    ProductDetailContent(viewModel = viewModel, productId = productId, popBack = popBack)
}


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ProductDetailContent(
    viewModel: ProductDetailViewModel,
    productId: String,
    popBack: () -> Unit
)
{
    val sheetState = rememberModalBottomSheetState(

        skipPartiallyExpanded = true)  // ‚úÖ S·ª≠a l·ªói
    val coroutineScope = rememberCoroutineScope()
    val state = viewModel.state.value
    val context = LocalContext.current
    var isSheetOpen by rememberSaveable  { mutableStateOf(false) }  // D√πng ƒë·ªÉ ki·ªÉm so√°t tr·∫°ng th√°i m·ªü sheet
    LaunchedEffect(productId) {
        if (!productId.isNullOrEmpty()) {
            viewModel.getProductDetail(productId)
        } else {
            Log.e("ProductDetailScreen", "L·ªói: productId r·ªóng ho·∫∑c null!")
        }
    }




    if (state.isLoading) {
        Log.d("ProductDetail", "Loading state: true")
        Column(
            modifier = Modifier.fillMaxSize(),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            CircularProgressIndicator()
            Text(text = "ƒêang t·∫£i.aaaa..", modifier = Modifier.padding(top = 8.dp))
        }

    } else if (state.productDetail != null)
    {
        val product = state.productDetail
        val availableSizes = product.stock.map { it.size }.distinct()

        var selectedPicture by rememberSaveable {
            mutableStateOf(
                if (product.images.isNotEmpty()) product.images[0] else null
            )
        }
        val scrollState = rememberScrollState()

        var selectedSize by rememberSaveable  {
            mutableStateOf(availableSizes.firstOrNull() ?: 0)
        }
        var availableColors by rememberSaveable  { mutableStateOf(listOf<String>()) }
        var selectedColor by rememberSaveable  { mutableStateOf<String?>(null) }
        Log.d("ProductDetail", "Available Sizes: $availableSizes")
        var isExpanded by rememberSaveable  { mutableStateOf(false) }  // ‚úÖ Th√™m nh·ªõ tr·∫°ng th√°i m·ªü r·ªông / thu g·ªçn

        Column(
            modifier = Modifier
                .fillMaxSize()
        ) {

            Box(
                modifier = Modifier
                    .fillMaxWidth()
            ) {
                Column(
                    modifier = Modifier.fillMaxWidth()
                        .height(800.dp)
                        .verticalScroll(scrollState),  // Cu·ªôn m∆∞·ª£t m√† kh√¥ng b·ªã l·ªói                    ,

                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    // üîπ Thanh ti√™u ƒë·ªÅ
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        IconButton(
                            onClick = { popBack() },
                            modifier = Modifier
                                .background(Color.White, CircleShape)
                                .clip(CircleShape)
                        ) {
                            Image(
                                painter = painterResource(id = R.drawable.back_icon),
                                contentDescription = null
                            )
                        }

                        Row(
                            modifier = Modifier
                                .background(Color.White, RoundedCornerShape(8.dp))
                                .padding(3.dp),
                            horizontalArrangement = Arrangement.spacedBy(4.dp),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = product.rating.toString(),
                                fontWeight = FontWeight.Bold,
                                color = Color.Black
                            )
                            Image(
                                painter = painterResource(id = R.drawable.star_icon),
                                contentDescription = null
                            )
                        }
                    }

                    // üîπ H√¨nh ·∫£nh s·∫£n ph·∫©m
                    selectedPicture?.let { image ->
                        Image(
                            painter = rememberAsyncImagePainter(image),
                            contentDescription = null,
                            modifier = Modifier.size(250.dp)
                        )
                    } ?: Text("Kh√¥ng c√≥ ·∫£nh s·∫£n ph·∫©m", color = Color.Gray)


                    if (product.images.isNotEmpty()) {
                        Row(
                            horizontalArrangement = Arrangement.spacedBy(50.dp),
                            modifier = Modifier.padding(12.dp)
                        ) {
                            product.images.forEach { image ->
                                IconButton(
                                    onClick = { selectedPicture = image },
                                    modifier = Modifier
                                        .size(18.dp)
                                        .border(
                                            width = 1.dp,
                                            color = if (selectedPicture == image) MaterialTheme.colors.primary else Color.Transparent,
                                            shape = RoundedCornerShape(10.dp)
                                        )
                                        .background(Color.White, shape = RoundedCornerShape(10.dp))
                                ) {
                                    Image(
                                        painter = rememberAsyncImagePainter(image),
                                        contentDescription = null
                                    )
                                }
                            }
                        }
                    } else {
                        Text("Kh√¥ng c√≥ ·∫£nh n√†o", color = Color.Gray)
                    }


                    // üîπ Th√¥ng tin s·∫£n ph·∫©m
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .background(Color.White, shape = RoundedCornerShape(topStart = 15.dp, topEnd = 15.dp))
                            .padding(15.dp)
                    ) {
                        val discountText = "${product.discount.toInt()}%" // Lu√¥n b·ªè ph·∫ßn th·∫≠p ph√¢n

                        val discountedPrice = product.price * (1 - product.discount.toFloat() / 100)
                        Row(
                            verticalAlignment = Alignment.Bottom,
                            horizontalArrangement = Arrangement.spacedBy(8.dp) // ƒêi·ªÅu ch·ªânh kho·∫£ng c√°ch h·ª£p l√Ω
                        ) {
                            // Gi√° gi·∫£m
                            Text(
                                text = "${String.format("%,d", discountedPrice.toLong())}ƒë",
                                fontSize = 30.sp,
                                fontWeight = FontWeight.Bold,
                                color = Color(0xFFD0011B) // M√†u ƒë·ªè
                            )

                            // Gi√° g·ªëc (g·∫°ch ngang)
                            Text(
                                text = "${String.format("%,d", product.price.toLong())}ƒëdd",
                                fontSize = 18.sp,
                                color = Color.Gray,
                                textDecoration = TextDecoration.LineThrough // G·∫°ch ngang gi√° g·ªëc
                            )

                            // Ph·∫ßn trƒÉm gi·∫£m gi√°
                            Text(
                                text = "-${discountText}",
                                fontSize = 18.sp,
                                fontWeight = FontWeight.Bold,
                                color = Color(0xFFFF8800) // M√†u cam
                            )


                            Spacer(modifier = Modifier.weight(1f)) // ƒê·∫©y "ƒê√£ b√°n" sang b√™n ph·∫£i

                            // ƒê√£ b√°n
                            Text(
                                text = "ƒê√£ bb√°n ${product.sold}",
                                fontSize = 16.sp,
                                color = Color.Gray
                            )

                        }
                        Spacer(modifier = Modifier.height(10.dp))



                        Text(
                            text = product.name,
                            fontWeight = FontWeight.Bold,
                            fontSize = 25.sp
                        )
                        Divider(
                            color = Color.LightGray, // M√†u vi·ªÅn
                            thickness = 0.5.dp, // ƒê·ªô d√†y vi·ªÅn
                            modifier = Modifier.padding(vertical = 10.dp)
                        )

                        Spacer(modifier = Modifier.height(10.dp))


                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = if (isExpanded) product.description else "${product.description.take(100)}...",
                                fontSize = 19.sp,
                                color = MaterialTheme.colors.onSurface,
                                modifier = Modifier.weight(1f) // Cho ph√©p chi·∫øm ph·∫ßn l·ªõn di·ªán t√≠ch
                            )

                            Row(
                                horizontalArrangement = Arrangement.spacedBy(5.dp),
                                verticalAlignment = Alignment.CenterVertically,
                                modifier = Modifier
                                    .clickable { isExpanded = !isExpanded }
                            ) {
                                Text(
                                    text = if (isExpanded) "Thu g·ªçn" else "Xem th√™m",
                                    color = MaterialTheme.colors.PrimaryColor,
                                    fontSize = 16.sp,
                                    textDecoration = TextDecoration.Underline
                                )
                                Icon(
                                    painter = painterResource(id = R.drawable.arrow_right),
                                    contentDescription = "",
                                    tint = MaterialTheme.colors.PrimaryColor,
                                    modifier = Modifier.rotate(if (isExpanded) 90f else 0f)
                                )
                            }
                        }
                        Divider(
                            color = Color.LightGray, // M√†u vi·ªÅn
                            thickness = 0.5.dp, // ƒê·ªô d√†y vi·ªÅn
                            modifier = Modifier.padding(vertical = 10.dp)
                        )

                        Column {


                            Spacer(modifier = Modifier.height(4.dp)) // Kho·∫£ng c√°ch nh·ªè

                            Row(verticalAlignment = Alignment.CenterVertically) {
                                Icon(
                                    painter = painterResource(id = R.drawable.ship), // Icon giao h√†ng
                                    contentDescription = "Shipping Icon",
                                    tint = Color(0xFF4CAF50), // M√†u xanh l√°
                                    modifier = Modifier.size(18.dp)
                                )

                                Spacer(modifier = Modifier.width(4.dp))

                                Text(
                                    text = "Nh·∫≠n t·ª´ 25 Th03 - 25 Th03, ph√≠ giao ƒë0",
                                    fontSize = 19.sp,
                                    color = Color.Black
                                )
                            }

                            Text(
                                text = "T·∫∑ng Voucher ƒë15.000 n·∫øu ƒë∆°n giao sau th·ªùi gian tr√™n.",
                                fontSize = 16.sp,
                                color = Color.Gray
                            )
                        }

                        Divider(
                            color = Color.LightGray, // M√†u vi·ªÅn
                            thickness = 0.5.dp, // ƒê·ªô d√†y vi·ªÅn
                            modifier = Modifier.padding(vertical = 10.dp)
                        )
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            modifier = Modifier.fillMaxWidth()
                        ) {
                            Text(
                                text = product.rating.toString(),
                                fontWeight = FontWeight.Bold,
                                color = Color.Black
                            )
                            Image(
                                painter = painterResource(id = R.drawable.star_icon),
                                contentDescription = null
                            )

                            Spacer(modifier = Modifier.width(4.dp))

                            Text(
                                text = "ƒê√°nh Gi√° S·∫£n Ph·∫©m",
                                fontSize = 18.sp,
                                fontWeight = FontWeight.Bold,
                                color = Color.Black
                            )

                            Spacer(modifier = Modifier.width(4.dp))

                            Text(
                                text = "(206)",
                                fontSize = 17.sp,
                                color = Color.Gray
                            )

                            Spacer(modifier = Modifier.weight(1f))

                            Text(
                                text = "T·∫•t c·∫£aa >",
                                fontSize = 17.sp,
                                fontWeight = FontWeight.Medium,
                                color = Color.Gray
                            )
                        }



                    }
                }
            }

            // üîπ N√∫t th√™m v√†o gi·ªè h√†ng
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color.White)
                    .padding(16.dp)
            ) {
                Button(
                    onClick = {
                        isSheetOpen = true
                        coroutineScope.launch {
                            sheetState.show()
                        }
                    },
                    colors = ButtonDefaults.buttonColors(
                        backgroundColor = MaterialTheme.colors.PrimaryColor,
                        contentColor = Color.White
                    ),
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(56.dp)
                        .clip(RoundedCornerShape(15.dp))
                ) {
                    Text(
                        text = "Th√™m v√†o gi·ªè h√†ng - ${String.format("%,d", product.price.toLong())}ƒë",
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Bold
                    )
                }
            }
        }


            // day khong lien quan
        if (isSheetOpen) {
            ModalBottomSheet(
                onDismissRequest = { isSheetOpen = false },
                sheetState = sheetState
            ) {
                BottomSheetContent(
                    product = product,
                    selectedSize = selectedSize,
                    selectedColor = selectedColor,
                    availableSizes = availableSizes,
                    availableColors = availableColors,
                    onSizeSelected = { selectedSize = it },
                    onColorSelected = { selectedColor = it }
                )
            }
        }




        LaunchedEffect(selectedSize) {
            availableColors = product.stock
                .filter { it.size == selectedSize && it.quantity > 0 }
                .mapNotNull { convertToHex(it.color) }
                .distinct()
            Log.d("ProductDetail", "Available Colors: $availableColors")

            selectedColor = availableColors.firstOrNull() // ƒê·∫∑t m√†u ƒë·∫ßu ti√™n h·ª£p l·ªá n·∫øu c√≥
        }


            }


     else {
        Toast.makeText(context, state.errorMessage, Toast.LENGTH_SHORT).show()
    }



}



fun convertToHex(color: String): String {
    val colorMap = mapOf(
        "red" to "#FF0000",
        "blue" to "#0000FF",
        "green" to "#008000",
        "yellow" to "#FFFF00",
        "black" to "#000000",
        "white" to "#FFFFFF",
        "gray" to "#808080",
        "purple" to "#800080",
        "orange" to "#FFA500",
        "pink" to "#FFC0CB"
    )

    return colorMap[color.lowercase()] ?: color // N·∫øu kh√¥ng t√¨m th·∫•y, gi·∫£ ƒë·ªãnh n√≥ l√† m√£ hex
}
fun convertToColorName(hex: String): String {
    val colorMap = mapOf(
        "#FF0000" to "Red",
        "#0000FF" to "Blue",
        "#008000" to "Green",
        "#FFFF00" to "Yellow",
        "#000000" to "Black",
        "#FFFFFF" to "White",
        "#808080" to "Gray",
        "#800080" to "Purple",
        "#FFA500" to "Orange",
        "#FFC0CB" to "Pink"
    )

    return colorMap[hex.uppercase()] ?: hex // N·∫øu kh√¥ng t√¨m th·∫•y, gi·ªØ nguy√™n m√£ hex
}


@Composable
fun BottomSheetContent(
    product: ProductModel,
    selectedSize: Int,
    selectedColor: String?,
    availableSizes: List<Int>,
    availableColors: List<String>,
    onSizeSelected: (Int) -> Unit,
    onColorSelected: (String) -> Unit
) {
    val db = FirebaseFirestore.getInstance()
    var stockQuantity by rememberSaveable  { mutableStateOf<Int?>(null) }

    // Khi selectedSize v√† selectedColor thay ƒë·ªïi, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ª´ Firestore
    LaunchedEffect(selectedSize, selectedColor) {
        if (selectedSize != null && selectedColor != null && product.id != null) {
            val nameColor = convertToColorName(selectedColor).replace(" ", "_")
            val documentId = "size_${selectedSize}_${nameColor}"

            Log.d("BottomSheet", "Fetching from: products/${product.id}/stock/$documentId")

            db.collection("products").document(product.id)
                .collection("stock").document(documentId)
                .get()
                .addOnSuccessListener { document ->
                    if (document.exists()) {
                        stockQuantity = document.getLong("quantity")?.toInt() ?: 0
                    } else {
                        stockQuantity = 0
                    }
                }
                .addOnFailureListener {
                    stockQuantity = null
                }
        }
    }


    Log.d("BottomSheet", "BottomSheetContent hi·ªÉn th·ªã")

    Column( modifier = Modifier
        .fillMaxHeight(0.5f)
        .padding(16.dp)
    ) {
        // H√†ng ch·ª©a ·∫£nh s·∫£n ph·∫©m v√† th√¥ng tin
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // ·∫¢nh s·∫£n ph·∫©m
            Image(
                painter = rememberAsyncImagePainter(product.images[0]),
                contentDescription = "Product Image",
                modifier = Modifier
                    .size(80.dp)
                    .clip(RoundedCornerShape(10.dp))
            )

            // C·ªôt ch·ª©a th√¥ng tin s·∫£n ph·∫©m
            Column(
                verticalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                Text(
                    text = product.name,
                    fontWeight = FontWeight.Bold,
                    fontSize = 20.sp
                )

                Row(verticalAlignment = Alignment.CenterVertically) {
                    Text(
                        text = "Gi√°: ${product.price}ƒë",
                        fontWeight = FontWeight.Bold,
                        color = Color.Red,
                        fontSize = 20.sp
                    )

                }

                Text(
                    text = "Kho: ${stockQuantity ?: "..."} s·∫£n ph·∫©m",
                    fontSize = 16.sp,
                    color = Color.Gray
                )
            }
        }
        Divider(
            color = Color.LightGray, // M√†u vi·ªÅn
            thickness = 0.5.dp, // ƒê·ªô d√†y vi·ªÅn
            modifier = Modifier.padding(vertical = 10.dp)
        )
        Text("Ch·ªçn Sizee", fontWeight = FontWeight.Bold, fontSize = 16.sp)
        LazyRow(horizontalArrangement = Arrangement.spacedBy(10.dp)) {
            items(availableSizes) { size ->
                Box(

                    modifier = Modifier
                        .border(
                            2.dp,
                            if (selectedSize == size) MaterialTheme.colors.primary else Color.Gray,
                            RoundedCornerShape(10.dp)
                        )
                        .background(Color.White, RoundedCornerShape(10.dp))
                        .clickable { onSizeSelected(size) }
                        .padding(15.dp)
                ) {
                    Log.d("BottomSheet", "Size: $size")
                    Text(text = size.toString(), fontSize = 17.sp, fontWeight = FontWeight.Bold)
                }
            }
        }
        Divider(
            color = Color.LightGray, // M√†u vi·ªÅn
            thickness = 0.9.dp, // ƒê·ªô d√†y vi·ªÅn
            modifier = Modifier.padding(vertical = 12.dp)
        )
        Text("Ch·ªçn M√†u", fontWeight = FontWeight.Bold, fontSize = 16.sp, modifier = Modifier.padding(top = 10.dp))
        LazyRow(horizontalArrangement = Arrangement.spacedBy(10.dp)) {
            items(availableColors) { color ->
                Box(
                    modifier = Modifier
                        .size(36.dp)
                        .border(
                            1.dp,
                            if (selectedColor == color) MaterialTheme.colors.primary else Color.Transparent,
                            CircleShape
                        )
                        .background(
                            Color(android.graphics.Color.parseColor(color)), CircleShape
                        )
                        .clip(CircleShape)
                        .clickable { onColorSelected(color) }
                )
            }
        }
        Divider(
            color = Color.LightGray, // M√†u vi·ªÅn
            thickness = 0.5.dp, // ƒê·ªô d√†y vi·ªÅn
            modifier = Modifier.padding(vertical = 10.dp)
        )

        var quantity by rememberSaveable  { mutableStateOf(1) }
        Row(
            modifier = Modifier.fillMaxWidth(), // ƒê·∫£m b·∫£o h√†ng chi·∫øm to√†n b·ªô chi·ªÅu r·ªông
            horizontalArrangement = Arrangement.Center, // CƒÉn gi·ªØa c√°c ph·∫ßn t·ª≠
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text("Ch·ªçn S·ªë L∆∞·ª£ng:", fontWeight = FontWeight.Bold, fontSize = 16.sp)

            Spacer(modifier = Modifier.width(150.dp)) // T·∫°o kho·∫£ng c√°ch nh·ªè gi·ªØa text v√† n√∫t

            IconButton(onClick = { if (quantity > 1) quantity-- }) {
                Image(painter = painterResource(id = R.drawable.remove), contentDescription = null)
            }

            Text(
                quantity.toString(),
                textAlign = TextAlign.Center,
                modifier = Modifier.width(35.dp)
            )

            IconButton(onClick = { if (quantity < 5) quantity++ }) {
                Image(painter = painterResource(id = R.drawable.plus_icon), contentDescription = null)
            }
        }


        val context = LocalContext.current
        Button(
            colors = ButtonDefaults.buttonColors(
                backgroundColor = MaterialTheme.colors.PrimaryColor,
                contentColor = Color.White
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 10.dp, bottom = 30.dp)
                .height(60.dp)
                .clip(RoundedCornerShape(15.dp)),

            onClick = {
                Toast.makeText(context, "ƒê√£ th√™m v√†o gi·ªè h√†ng", Toast.LENGTH_SHORT).show()
            },
        ) {
            Text("X√°c nh·∫≠n")
        }

    }

}

